#include <iostream>
#include <fstream>
#include <windows.h>
#include <conio.h>
using namespace std;

char print[41][166] = {
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {'#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#'},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {'#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#'},
    {'#', '#', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '#', '#'},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
};
void instruction();
void printHeli(int heliX, int heliY);
void printmaze();
void maze();
void winMaze();
void losemaze();
int navigation(int navig);
int menuOption();
void gotoxy(int x, int y);
char getCharAtxy(short int x, short int y);
void removeHeli(int heliX, int heliY);
void bullets(int &index, int heliX, int heliY, int bulletX[], int bulletY[]);
void moveBullet(char a, char b, char d, int &index, int &score, char b1, char b2, int bulletX[], int bulletY[], int enemy1X, int enemy1Y, int enemy2X, int enemy2Y, int &enemy1Health, int &enemy2Health, bool &flag1, bool &flag2, char e1, char e2, int enemy3X, int enemy3Y, int &enemy3Health, bool &flag3, int &health);
void detectCollision(int bulletX, int bulletY, int enemy1X, int enemy1Y, int enemy2X, int enemy2Y, int &enemy1Health, int &enemy2Health, bool &flag1, bool &flag2, char e1, char e2);
void detect3Enemy(int bulletX, int bulletY, int enemy3X, int enemy3Y, bool &flag3, char b1, char b2, int &enemy3Health, int &health);
void printEnemy1(char c1, char c2, int enemy1X, int enemy1Y);
void printEnemy2(char e1, char e2, int enemy2X, int enemy2Y);
void printEnemy3(char b1, char b2, int enemy3X, int enemy3Y);
void eraseEnemy1(int enemy1X, int enemy1Y);
void eraseEnemy2(char e1, char e2, int enemy2X, int enemy2Y);
void eraseEnemy3(char b1, char b2, int enemy3X, int enemy3Y);
void moveEnemy1(string &direction, char c1, char c2, int &enemy1X, int &enemy1Y);
void moveEnemy2(string &direction2, char e1, char e2, int &enemy2X, int &enemy2Y);
void moveEnemy3(string &direction3, char b1, char b2, int &enemy3X, int &enemy3Y);
void enemy1Bullet(int &index1, char b, int enemy1X, int enemy1Y, int enemy1BulletX[], int enemy1BulletY[]);
void moveEnemy1Bullet(char b, int &health, int &index1, char c1, int enemy1BulletX[], int enemy1BulletY[]);
void enemy2Bullet(int &index2, int enemy2X, int enemy2Y, int enemy2BulletX[], int enemy2BulletY[], char d);
void moveEnemy2Bullet(char d, int &health, int &index2, char c1, int enemy2BulletX[], int enemy2BulletY[]);
void enemy3Bullet(int &index3, char b1, int enemy3X, int enemy3Y, int enemy3BulletX[], int enemy3BulletY[]);
void moveEnemy3Bullet(int &health, int &index3, char b1, char c1, int enemy3BulletX[], int enemy3BulletY[]);
void addScore(int &score);
void printAddScore(int &score);
void printHealth(int &health, char c1);
void removeHealth(int &health, char c1);
void storeScore(int &index4, int highScore[], int score);
void loadScore(int highScore[], int &index4);
void menu(char c1);
void goLeft(int &heliX, int &heliY);
void goRight(int &heliX, int &heliY);
void goDown(int &heliX, int &heliY);
void goUp(int &heliX, int &heliY);
void printScore(int &index4, int highScore[]);

main()
{
  int heliX = 10;
  int heliY = 10;
  int enemy1X = 137;
  int enemy1Y = 39;
  int enemy2X = 137;
  int enemy2Y = 10;
  int enemy3X = 10;
  int enemy3Y = 3;
  int bulletX[100];
  int bulletY[100];
  int enemy1BulletX[100];
  int enemy1BulletY[100];
  int enemy2BulletX[100];
  int enemy2BulletY[100];
  int enemy3BulletX[100];
  int enemy3BulletY[100];
  int highScore[100];
  int timer = 0;
  int index1 = 0;
  int index2 = 0;
  int index3 = 0;
  int index4 = 0;
  string direction = "up";
  string direction2 = "left";
  string direction3 = "right";
  int score = 0;
  int index = 0;
  int health = 15;
  int enemy1Health = 30;
  int enemy2Health = 20;
  int enemy3Health = 20;
  bool flag1 = 1;
  bool flag2 = 1;
  bool flag3 = 1;
  bool switch1 = 1;
  bool switch2 = 1;
  bool switch3 = 1;
  char a = 16;
  char b = 4;
  char d = 149;
  char b1 = 219;
  char b2 = 223;
  char c1 = 219;
  char c2 = 185;
  char e1 = 178;
  char e2 = 185;
  bool gameRunning = true;
  int option;

  while (true)
  {
    loadScore(highScore, index4);
    system("cls");
    menu(c1);
    int option = menuOption();
    if (option == 1)
    {
      system("cls");
      cout << ".......................Welcome to Heli Havoc Game................" << endl;
      cout << endl;
      printmaze();
      printHeli(heliX, heliY);

      // enemy1Bullet(index1);
      while (gameRunning)
      {
        if (GetAsyncKeyState(VK_UP))
        {
          goUp(heliX, heliY);
        }
        if (GetAsyncKeyState(VK_DOWN))
        {
          goDown(heliX, heliY);
        }
        if (GetAsyncKeyState(VK_LEFT))
        {
          goLeft(heliX, heliY);
        }
        if (GetAsyncKeyState(VK_RIGHT))
        {
          goRight(heliX, heliY);
        }
        if (GetAsyncKeyState(VK_SPACE))
        {
          bullets(index, heliX, heliY, bulletX, bulletY);
        }

        // enemy1......................

        if (timer % 30 == 0 && flag1 == 1)
        {
          printEnemy1(c1, c2, enemy1X, enemy1Y);
          enemy1Bullet(index1, b, enemy1X, enemy1Y, enemy1BulletX, enemy1BulletY);
          moveEnemy1(direction, c1, c2, enemy1X, enemy1Y);
        }
        if (flag1 == 0 && switch1 == 1)
        {
          eraseEnemy1(enemy1X, enemy1Y);
          switch1 = 0;
        }

        //  enemy1................................

        if (timer % 40 == 0 && flag3 == 1)
        {
          enemy3Bullet(index3, b1, enemy3X, enemy3Y, enemy3BulletX, enemy3BulletY);
          printEnemy3(b1, b2, enemy3X, enemy3Y);
          moveEnemy3(direction3, b1, b2, enemy3X, enemy3Y);
          // timer = 0;
        }
        if (flag3 == 0 && switch3 == 1)
        {
          eraseEnemy3(b1, b2, enemy3X, enemy3Y);
          switch3 = 0;
        }

        moveBullet(a, b, d, index, score, b1, b2, bulletX, bulletY, enemy1X, enemy1Y, enemy2X, enemy2Y, enemy1Health, enemy2Health, flag1, flag2, e1, e2, enemy3X, enemy3Y, enemy3Health, flag3, health);
        Sleep(5);

        // enemy2.......................

        if (flag2 == 1 && timer % 30 == 0)
        {
          moveEnemy2(direction2, e1, e2, enemy2X, enemy2Y);
          printEnemy2(e1, e2, enemy2X, enemy2Y);
          enemy2Bullet(index2, enemy2X, enemy2Y, enemy2BulletX, enemy2BulletY, d);
          // eraseEnemy2(e1, e2, enemy2X, enemy2Y);
        }
        if (flag2 == 0 && switch2 == 1)
        {
          eraseEnemy2(e2, e2, enemy2X, enemy2Y);
          switch2 = 0;
        }

        // enemy2.......................

        moveEnemy1Bullet(b, health, index1, c1, enemy1BulletX, enemy1BulletY);
        moveEnemy2Bullet(d, health, index2, c1, enemy2BulletX, enemy2BulletY);
        moveEnemy3Bullet(health, index3, b1, c1, enemy3BulletX, enemy3BulletY);
        printHealth(health, c1);
        printAddScore(score);
        timer++;
        if (health == 0)
        {
          index4++;
          storeScore(index4, highScore, score);
          health = 15;
          system("cls");
          losemaze();
          gotoxy(55, 30);
          cout << "Score : " << score << endl
               << endl;
          Sleep(2000);
          break;
        }
        if (flag3 == 0 && flag2 == 0 && flag1 == 0)
        {

          system("cls");
          index4++;
          storeScore(index4, highScore, score);
          winMaze();
          Sleep(2000);
          break;
        }
      }
    }
    if (option == 2)
    {
      instruction();
    }
    if (option == 3)
    {
      printScore(index4, highScore);
    }
    if (option == 4)
    {
      break;
    }
    cout << "Press any character to continue....................." << endl;
    getch();
  }
}
void menu(char c1)
{
  int k = 1;
  HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
  SetConsoleTextAttribute(hConsole, k);
  system("cls");
  cout << "  /$$   /$$ /$$$$$$$$ /$$       /$$$$$$       /$$   /$$  /$$$$$$  /$$    /$$  /$$$$$$   /$$$$$$  " << endl;
  cout << " | $$  | $$| $$_____/| $$      |_  $$_/      | $$  | $$ /$$__  $$| $$   | $$ /$$__  $$ /$$__  $$ " << endl;
  cout << " | $$  | $$| $$      | $$        | $$        | $$  | $$| $$  \\ $$| $$   | $$| $$  \\ $$| $$  \\__/ " << endl;
  cout << " | $$$$$$$$| $$$$$   | $$        | $$        | $$$$$$$$| $$$$$$$$|  $$ / $$/| $$  | $$| $$       " << endl;
  cout << " | $$__  $$| $$__/   | $$        | $$        | $$__  $$| $$__  $$ \\  $$ $$/ | $$  | $$| $$       " << endl;
  cout << " | $$  | $$| $$      | $$        | $$        | $$  | $$| $$  | $$  \\  $$$/  | $$  | $$| $$    $$ " << endl;
  cout << " | $$  | $$| $$$$$$$$| $$$$$$$$ /$$$$$$      | $$  | $$| $$  | $$   \\  $/   |  $$$$$$/|  $$$$$$/ " << endl;
  cout << " |__/  |__/|________/|________/|______/      |__/  |__/|__/  |__/    \\_/     \\______/  \\______/  " << endl;
  cout << endl;
  cout << endl;
  cout << "_________________Loading...";
  Sleep(500);
  cout << c1 << c1 << c1 << c1;
  Sleep(500);
  cout << c1 << c1 << c1 << c1;
  Sleep(500);
  cout << c1 << c1 << c1 << c1;
  cout << endl;
}

void winMaze()
{
  cout << endl
       << endl
       << endl
       << endl
       << endl;
  cout << "\t\t\t $$\\     $$\\                                       $$\\      $$\\       $$\\                  " << endl;
  cout << "\t\t\t \\$$\\   $$  |                                      $$ | $\\  $$ |      \\__|                 " << endl;
  cout << "\t\t\t  \\$$\\ $$  /        $$$$$$\\        $$\\   $$\\       $$ |$$$\\ $$ |      $$\\       $$$$$$$\\   " << endl;
  cout << "\t\t\t   \\$$$$  /        $$  __$$\\       $$ |  $$ |      $$ $$ $$\\$$ |      $$ |      $$  __$$\\  " << endl;
  cout << "\t\t\t    \\$$  /         $$ /  $$ |      $$ |  $$ |      $$$$  _$$$$ |      $$ |      $$ |  $$ | " << endl;
  cout << "\t\t\t     $$ |          $$ |  $$ |      $$ |  $$ |      $$$  / \\$$$ |      $$ |      $$ |  $$ | " << endl;
  cout << "\t\t\t     $$ |          \\$$$$$$  |      \\$$$$$$  |      $$  /   \\$$ |      $$ |      $$ |  $$ | " << endl;
  cout << "\t\t\t     \\__|           \\______/        \\______/       \\__/     \\__|      \\__|      \\__|  \\__| " << endl;
}

void losemaze()
{
  cout << endl
       << endl
       << endl
       << endl
       << endl;
  cout << "\t\t\t $$\\     $$\\                                       $$\\                                                        " << endl;
  cout << "\t\t\t \\$$\\   $$  |                                      $$ |                                                       " << endl;
  cout << "\t\t\t  \\$$\\ $$  /        $$$$$$\\        $$\\   $$\\       $$ |             $$$$$$\\         $$$$$$$\\        $$$$$$\\   " << endl;
  cout << "\t\t\t   \\$$$$  /        $$  __$$\\       $$ |  $$ |      $$ |            $$  __$$\\       $$  _____|      $$  __$$\\  " << endl;
  cout << "\t\t\t    \\$$  /         $$ /  $$ |      $$ |  $$ |      $$ |            $$ /  $$ |      \\$$$$$$\\        $$$$$$$$ | " << endl;
  cout << "\t\t\t     $$ |          $$ |  $$ |      $$ |  $$ |      $$ |            $$ |  $$ |       \\____$$\\       $$   ____| " << endl;
  cout << "\t\t\t     $$ |          \\$$$$$$  |      \\$$$$$$  |      $$$$$$$$\\       \\$$$$$$  |      $$$$$$$  |      \\$$$$$$$\\  " << endl;
  cout << "\t\t\t     \\__|           \\______/        \\______/       \\________|       \\______/       \\_______/        \\_______| " << endl;
}

int menuOption()
{
  // gotoxy(15,30);
  cout << endl
       << endl
       << endl
       << endl
       << endl;
  cout << " \t\t\t\t START" << endl;
  cout << " \t\t\t\t INSTRUCTION" << endl;
  cout << "\t\t\t\t HIGH SCORE" << endl;
  cout << " \t\t\t\t EXIT " << endl;
  int option = navigation(4);
}
void instruction()
{
  system("cls");
  int k = 7;
  HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
  SetConsoleTextAttribute(hConsole, k);
  cout << "\t\t\t\t........WELCOME! THESE ARE THE INSTRUCTIONS OF GAME HELI HAVOC.......... " << endl;
  cout << endl;
  cout << "1. Upper Arrow key used to move the helicopter upward." << endl
       << endl;
  cout << "2. Down Arrow key is used to move the helicopter downward." << endl
       << endl;
  cout << "3. Left Arrow key is used to move the helicopter left side." << endl
       << endl;
  cout << "4. Right Arrow key is used to move the helicopter right side." << endl
       << endl;
  cout << "5. Space key is used to fire the enemies." << endl
       << endl;
  cout << "6. When you hit by enemy fire your health will decreases by 1." << endl
       << endl;
  cout << "7. when your bullet hits the enemy, his health decreases and when it health reaches to zero. then enemy killed." << endl
       << endl;
}
void printHeli(int heliX, int heliY)
{
  char heli1[3][14] = {
      {' ', ' ', ' ', '-', '-', '-', '-', '-', '|', '-', '-', '-', '-', '-'},
      {'*', '>', '=', '=', '=', '=', '=', '[', '_', ']', 'L', ')', ' ', ' '},
      {' ', ' ', ' ', ' ', ' ', ' ', ' ', ',', ' ', ',', ' ', ' ', ' ', ' '},
  };
  int k = 8;
  HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
  SetConsoleTextAttribute(hConsole, k);
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 14; j++)
    {

      gotoxy(heliX + j, heliY + i);
      cout << heli1[i][j];
    }
  }
}
void removeHeli(int heliX, int heliY)
{
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 14; j++)
    {
      gotoxy(heliX + j, heliY + i);
      cout << " ";
    }
  }
}

void printmaze()
{
  for (int i = 0; i < 41; i++)
  {
    for (int j = 0; j < 166; j++)
    {
      cout << print[i][j];
    }
    cout << endl;
  }
}

void gotoxy(int x, int y)
{
  COORD coordinates;
  coordinates.X = x;
  coordinates.Y = y;
  SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coordinates);
}

char getCharAtxy(short int x, short int y)
{
  CHAR_INFO ci;
  COORD xy = {0, 0};
  SMALL_RECT rect = {x, y, x, y};
  COORD coordBufSize;
  coordBufSize.X = 1;
  coordBufSize.Y = 1;
  return ReadConsoleOutput(GetStdHandle(STD_OUTPUT_HANDLE), &ci, coordBufSize, xy, &rect) ? ci.Char.AsciiChar
                                                                                          : ' ';
}

void bullets(int &index, int heliX, int heliY, int bulletX[], int bulletY[])
{
  bulletX[index] = heliX + 13;
  bulletY[index] = heliY + 1;
  gotoxy(bulletX[index], bulletY[index]);
  cout << ".";
  index++;
}
void moveBullet(char a, char b, char d, int &index, int &score, char b1, char b2, int bulletX[], int bulletY[], int enemy1X, int enemy1Y, int enemy2X, int enemy2Y, int &enemy1Health, int &enemy2Health, bool &flag1, bool &flag2, char e1, char e2, int enemy3X, int enemy3Y, int &enemy3Health, bool &flag3, int &health)
{

  int k = 5;
  HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
  SetConsoleTextAttribute(hConsole, k);
  for (int i = 0; i < index; i++)
  {
    char next = getCharAtxy(bulletX[i] + 1, bulletY[i]);
    if (next == ' ')
    {
      gotoxy(bulletX[i], bulletY[i]);
      cout << " ";
      bulletX[i]++;
      cout << a;
    }
    if (next == 'C' || next == '/' || next == '|' || next == b2 || next == b1)
    {
      addScore(score);
      detectCollision(bulletX[i] + 1, bulletY[i], enemy1X, enemy1Y, enemy2X, enemy2Y, enemy1Health, enemy2Health, flag1, flag2, e1, e2);
      detect3Enemy(bulletX[i] + 1, bulletY[i], enemy3X, enemy3Y, flag3, b1, b2, enemy3Health, health);
    }

    if (next != ' ')
    {
      gotoxy(bulletX[i], bulletY[i]);
      cout << " ";
      for (int j = i; j < index - 1; j++)
      {
        bulletX[j] = bulletX[j + 1];
        bulletY[j] = bulletY[j + 1];
      }
      index--;
    }
  }
}

void detectCollision(int bulletX, int bulletY, int enemy1X, int enemy1Y, int enemy2X, int enemy2Y, int &enemy1Health, int &enemy2Health, bool &flag1, bool &flag2, char e1, char e2)
{
  for (int x = 0; x < 6; x++)
  {
    for (int y = 0; y < 3; y++)
    {
      if (enemy1X + x == bulletX && enemy1Y + y == bulletY)
      {
        enemy1Health--;
        gotoxy(148, 6);
        cout << "Enemy1Health : " << enemy1Health;
        if (enemy1Health == 0)
        {
          eraseEnemy1(enemy1X, enemy1Y);
          flag1 = 0;
        }
      }
      else if (enemy2X + x == bulletX && enemy2Y + y == bulletY)
      {
        enemy2Health--;
        gotoxy(148, 8);
        cout << "Enemy2Health : " << enemy2Health;
        if (enemy2Health == 0)
        {
          eraseEnemy2(e1, e2, enemy2X, enemy2Y);
          flag2 = 0;
        }
      }
    }
  }
}

void detect3Enemy(int bulletX, int bulletY, int enemy3X, int enemy3Y, bool &flag3, char b1, char b2, int &enemy3Health, int &health)
{
  for (int x = 0; x < 2; x++)
  {
    for (int y = 0; y < 2; y++)
    {
      if (enemy3X + x == bulletX && enemy3Y + y == bulletY)
      {
        enemy3Health--;
        gotoxy(148, 10);
        cout << "Enemy3Health : " << enemy3Health;
        if (enemy3Health == 0)
        {
          eraseEnemy3(b1, b2, enemy3X, enemy3Y);
          health = 15;
          flag3 = 0;
        }
      }
    }
  }
}

void printEnemy1(char c1, char c2, int enemy1X, int enemy1Y)
{
  char aero1[3][6] = {
      {' ', ' ', '/', '|', ' ', ' '},
      {'C', c1, c1, c1, c1, c2},
      {' ', ' ', '|', '/', ' ', ' '},
  };
  int k = 9;
  HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
  SetConsoleTextAttribute(hConsole, k);
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 6; j++)
    {
      if (i == 1)
      {
        int k = 9;
        HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
        SetConsoleTextAttribute(hConsole, k);
      }
      gotoxy(enemy1X + j, enemy1Y + i);
      cout << aero1[i][j];
    }
  }
}

void printEnemy2(char e1, char e2, int enemy2X, int enemy2Y)
{
  char enemy1[3][6] = {
      {' ', ' ', '/', '|', ' ', ' '},
      {'C', e1, e1, e1, e1, e2},
      {' ', ' ', '|', '/', ' ', ' '},
  };
  int k = 4;
  HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
  SetConsoleTextAttribute(hConsole, k);
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 6; j++)
    {
      gotoxy(enemy2X + j, enemy2Y + i);
      cout << enemy1[i][j];
    }
  }
}
void eraseEnemy2(char e1, char e2, int enemy2X, int enemy2Y)
{
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 6; j++)
    {
      gotoxy(enemy2X + j, enemy2Y + i);
      cout << " ";
    }
  }
}
void eraseEnemy1(int enemy1X, int enemy1Y)
{
  for (int i = 0; i < 3; i++)
  {
    for (int j = 0; j < 6; j++)
    {
      gotoxy(enemy1X + j, enemy1Y + i);
      cout << " ";
    }
  }
}

void moveEnemy1(string &direction, char c1, char c2, int &enemy1X, int &enemy1Y)
{
  if (direction == "up")
  {
    // getCharAtxy(enemy1X, enemy1Y - 1);
    if (getCharAtxy(enemy1X, enemy1Y - 1) == ' ')
    {
      if (enemy1Y > 21)
      {
        // gotoxy(enemy1X,enemy1Y);k8
        eraseEnemy1(enemy1X, enemy1Y);
        enemy1Y = enemy1Y - 1;
        gotoxy(enemy1X, enemy1Y);
        printEnemy1(c1, c2, enemy1X, enemy1Y);
      }
      else
      {
        direction = "down";
      }
    }
  }
  if (direction == "down")
  {

    if (getCharAtxy(enemy1X, enemy1Y + 3) == ' ')
    {
      if (enemy1Y < 38)
      {
        eraseEnemy1(enemy1X, enemy1Y);
        enemy1Y = enemy1Y + 1;

        gotoxy(enemy1X, enemy1Y);
        printEnemy1(c1, c2, enemy1X, enemy1Y);
      }
      else
      {
        direction = "up";
      }
    }
  }
  void moveEnemy2(string & direction2, char e1, char e2, int &enemy2X, int &enemy2Y)
  {
    if (direction2 == "left")
    {
      if (getCharAtxy(enemy2X - 1, enemy2Y) == ' ')
      {
        if (enemy2X > 100)
        {
          eraseEnemy2(e1, e2, enemy2X, enemy2Y);
          enemy2X = enemy2X - 1;
          gotoxy(enemy2X, enemy2Y);
          printEnemy2(e1, e2, enemy2X, enemy2Y);
        }
        else
        {
          direction2 = "right";
        }
      }
    }
    if (direction2 == "right")
    {
      if (getCharAtxy(enemy2X + 4, enemy2Y) == ' ')
      {
        if (enemy2X < 137)
        {
          eraseEnemy2(e1, e2, enemy2X, enemy2Y);
          enemy2X = enemy2X + 1;
          gotoxy(enemy2X, enemy2Y);
          printEnemy2(e1, e2, enemy2X, enemy2Y);
        }
        else
        {
          direction2 = "left";
        }

        // Sleep(100);
      }
    }
 
  }
  void goLeft(int &heliX, int &heliY)
  {
    getCharAtxy(heliX - 1, heliY);
    if (getCharAtxy(heliX - 1, heliY + 1) == ' ')
    {
      removeHeli(heliX, heliY);
      heliX = heliX - 1;
      gotoxy(heliX, heliY);
      printHeli(heliX, heliY);
    }
  }
  void goRight(int &heliX, int &heliY)
  {
    getCharAtxy(heliX + 14, heliY);
    if (getCharAtxy(heliX + 14, heliY) == ' ' && getCharAtxy(heliX + 13, heliY + 1) == ' ' && getCharAtxy(heliX + 11, heliY + 3) == ' ' && getCharAtxy(heliX + 13, heliY + 3) == ' ')
    {
      removeHeli(heliX, heliY);
      heliX = heliX + 1;
      gotoxy(heliX, heliY);
      printHeli(heliX, heliY);
    }
  }
  void goDown(int &heliX, int &heliY)
  {

    getCharAtxy(heliX, heliY + 2);
    if (getCharAtxy(heliX, heliY + 3) == ' ' && getCharAtxy(heliX + 2, heliY + 3) == ' ' && getCharAtxy(heliX + 5, heliY + 3) == ' ' && getCharAtxy(heliX + 11, heliY + 2) == ' ' && getCharAtxy(heliX + 7, heliY + 3) == ' ' && getCharAtxy(heliX + 8, heliY + 3) == ' ' && getCharAtxy(heliX + 13, heliY + 1) == ' ' && getCharAtxy(heliX + 3, heliY + 3) == ' ')
    {
      removeHeli(heliX, heliY);
      heliY = heliY + 1;
      gotoxy(heliX, heliY);
      printHeli(heliX, heliY);
    }
  }
  void goUp(int &heliX, int &heliY)
  {
    getCharAtxy(heliX, heliY - 1);
    if (getCharAtxy(heliX, heliY - 1) == ' ' && getCharAtxy(heliX + 1, heliY - 1) == ' ' && getCharAtxy(heliX + 2, heliY - 1) == ' ' && getCharAtxy(heliX + 3, heliY - 1) == ' ' && getCharAtxy(heliX + 4, heliY - 1) == ' ' && getCharAtxy(heliX + 5, heliY - 1) == ' ' && getCharAtxy(heliX + 6, heliY - 1) == ' ' && getCharAtxy(heliX + 7, heliY - 1) == ' ' && getCharAtxy(heliX + 8, heliY - 1) == ' ' && getCharAtxy(heliX + 9, heliY - 1) == ' ' && getCharAtxy(heliX + 10, heliY - 1) == ' ' && getCharAtxy(heliX + 11, heliY - 1) == ' ' && getCharAtxy(heliX + 12, heliY - 1) == ' ' && getCharAtxy(heliX + 13, heliY - 1) == ' ')
    {
      removeHeli(heliX, heliY);
      heliY = heliY - 1;
      gotoxy(heliX, heliY);
      printHeli(heliX, heliY);
    }
  }

  // enemy 1 bullets...
  void enemy1Bullet(int &index1, char b, int enemy1X, int enemy1Y, int enemy1BulletX[], int enemy1BulletY[])
  {
    enemy1BulletX[index1] = enemy1X - 1;
    enemy1BulletY[index1] = enemy1Y + 1;
    gotoxy(enemy1BulletX[index1], enemy1BulletY[index1]);
    cout << b;
    index1++;
  }
  void moveEnemy1Bullet(char b, int &health, int &index1, char c1, int enemy1BulletX[], int enemy1BulletY[])
  {
    int k = 9;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, k);
    for (int i = 0; i < index1; i++)
    {
      char next = getCharAtxy(enemy1BulletX[i] - 1, enemy1BulletY[i]);
      if (next == ' ')
      {
        gotoxy(enemy1BulletX[i], enemy1BulletY[i]);
        cout << " ";
        enemy1BulletX[i]--;
        gotoxy(enemy1BulletX[i], enemy1BulletY[i]);
        cout << b;
      }
      if (next == '-' || next == ')' || next == ',' || next == '|')
      {
        removeHealth(health, c1);
      }

      if (next != ' ')
      {
        gotoxy(enemy1BulletX[i], enemy1BulletY[i]);
        cout << " ";
        for (int j = i; j < index1 - 1; j++)
        {
          enemy1BulletX[j] = enemy1BulletX[j + 1];
          enemy1BulletY[j] = enemy1BulletY[j + 1];
        }
        index1--;
      }
    }
  }

  // enemy 1 bullets ....

  // enemy 2 .....

  void enemy2Bullet(int &index2, int enemy2X, int enemy2Y, int enemy2BulletX[], int enemy2BulletY[], char d)
  {
    enemy2BulletX[index2] = enemy2X - 3;
    enemy2BulletY[index2] = enemy2Y + 1;
    gotoxy(enemy2BulletX[index2], enemy2BulletY[index2]);
    cout << d;
    index2++;
  }
  void moveEnemy2Bullet(char d, int &health, int &index2, char c1, int enemy2BulletX[], int enemy2BulletY[])
  {
    int k = 4;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, k);
    for (int i = 0; i < index2; i++)
    {
      char next = getCharAtxy(enemy2BulletX[i] - 1, enemy2BulletY[i]);
      if (next == ' ')
      {
        gotoxy(enemy2BulletX[i], enemy2BulletY[i]);
        cout << " ";
        enemy2BulletX[i]--;
        gotoxy(enemy2BulletX[i], enemy2BulletY[i]);
        cout << d;
      }
      if (next == '-' || next == ')' || next == ',' || next == '|')
      {
        removeHealth(health, c1);
      }

      if (next != ' ')
      {
        gotoxy(enemy2BulletX[i], enemy2BulletY[i]);
        cout << " ";
        for (int j = i; j < index2 - 1; j++)
        {
          enemy2BulletX[j] = enemy2BulletX[j + 1];
          enemy2BulletY[j] = enemy2BulletY[j + 1];
        }
        index2--;
      }
    }
  }

  // enemy 2.......

  // enemy 3...
  void printEnemy3(char b1, char b2, int enemy3X, int enemy3Y)
  {
    char box1[2][3] = {
        {b1, b1, b1},
        {' ', b2, ' '},
    };
    int k = 2;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, k);
    for (int i = 0; i < 2; i++)
    {
      for (int j = 0; j < 3; j++)
      {
        gotoxy(enemy3X + j, enemy3Y + i);
        cout << box1[i][j];
      }
    }
  }
  void eraseEnemy3(char b1, char b2, int enemy3X, int enemy3Y)
  {
    for (int i = 0; i < 2; i++)
    {
      for (int j = 0; j < 3; j++)
      {
        gotoxy(enemy3X + j, enemy3Y + i);
        cout << " ";
      }
    }
  }
  void moveEnemy3(string & direction3, char b1, char b2, int &enemy3X, int &enemy3Y)
  {
    if (direction3 == "right")
    {
      if (getCharAtxy(enemy3X + 3, enemy3Y) == ' ')
      {
        if (enemy3X < 50)
        {
          eraseEnemy3(b1, b2, enemy3X, enemy3Y);
          enemy3X = enemy3X + 1;
          gotoxy(enemy3X, enemy3Y);
          printEnemy3(b1, b2, enemy3X, enemy3Y);
        }
        else
        {
          direction3 = "left";
        }
      }
    }
    if (direction3 == "left")
    {
      if (getCharAtxy(enemy3X - 1, enemy3Y) == ' ')
      {
        if (enemy3X > 10)
        {
          eraseEnemy3(b1, b2, enemy3X, enemy3Y);
          enemy3X = enemy3X - 1;
          gotoxy(enemy3X, enemy3Y);
          printEnemy3(b1, b2, enemy3X, enemy3Y);
        }
        else
        {
          direction3 = "right";
        }
      }
    }
  }
  void enemy3Bullet(int &index3, char b1, int enemy3X, int enemy3Y, int enemy3BulletX[], int enemy3BulletY[])
  {
    enemy3BulletX[index3] = enemy3X + 1;
    enemy3BulletY[index3] = enemy3Y + 2;
    gotoxy(enemy3BulletX[index3], enemy3BulletY[index3]);
    cout << b1;
    index3++;
  }
  void moveEnemy3Bullet(int &health, int &index3, char b1, char c1, int enemy3BulletX[], int enemy3BulletY[])
  {
    int k = 10;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, k);
    for (int i = 0; i < index3; i++)
    {
      char next = getCharAtxy(enemy3BulletX[i], enemy3BulletY[i] + 1);
      if (next == ' ')
      {
        gotoxy(enemy3BulletX[i], enemy3BulletY[i]);
        cout << " ";
        enemy3BulletY[i]++;
        gotoxy(enemy3BulletX[i], enemy3BulletY[i]);
        cout << b1;
      }
      if (next == '-' || next == '=' || next == '>' || next == '|' || next == '*')
      {
        removeHealth(health, c1);
      }

      if (next != ' ')
      {
        gotoxy(enemy3BulletX[i], enemy3BulletY[i]);
        cout << " ";
        for (int j = i; j < index3 - 1; j++)
        {
          enemy3BulletX[j] = enemy3BulletX[j + 1];
          enemy3BulletY[j] = enemy3BulletY[j + 1];
        }
        index3--;
      }
    }
  }

  // enemy3.............

  // Score ..........................

  void addScore(int &score)
  {
    score = score + 1;
  }
  void printAddScore(int &score)
  {
    int k = 6;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, k);
    gotoxy(23, 43);
    cout << "Score : " << score << endl;
  }
  void printHealth(int &health, char c1)
  {
    int k = 6;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, k);
    gotoxy(50, 43);
    cout << "Health : ";
    for (int i = 0; i < health; i++)
    {
      cout << c1;
    }
  }
  void removeHealth(int &health, char c1)
  {
    int k = 6;
    HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
    SetConsoleTextAttribute(hConsole, k);
    gotoxy(50, 43);
    cout << "Health : ";
    for (int i = 0; i < 15; i++)
    {
      cout << " ";
    }
    health--;
    gotoxy(50, 43);
    for (int i = 0; i < health; i++)
    {
      cout << c1;
    }
  }

  int navigation(int navig)
  {
    int navX = 25;
    int navY = 16;
    int x = 1;
    while (true)
    {
      gotoxy(navX, navY);
      cout << "=>";
      gotoxy(20, 20);
      if (GetAsyncKeyState(VK_DOWN))
      {
        if (x < navig)
        {
          x = x + 1;
          gotoxy(navX, navY);
          cout << "  ";
          navY = navY + 1;
          gotoxy(navX, navY);
          cout << "=>";
        }
      }
      if (GetAsyncKeyState(VK_UP))
      {
        if (x > 1)
        {
          x = x - 1;
          gotoxy(navX, navY);
          cout << "  ";
          navY = navY - 1;
          gotoxy(navX, navY);
          cout << "=>";
        }
      }
      if (getch() == 13)
      {
        system("cls");
        return x;
      }
      Sleep(100);
    }
  }
  void storeScore(int &index4, int highScore[], int score)
  {
    fstream myFile;
    myFile.open("score.txt", ios::out);
    index4--;
    highScore[index4] = score;
    for (int i = 0; i < index4 + 1; i++)
    {
      myFile << highScore[i] << endl;
    }

    myFile.close();
  }
  void loadScore(int highScore[], int &index4)
  {
    fstream myFile;
    myFile.open("score.txt", ios::in);
    if (myFile.is_open())
    {
      int i = 0;
      while (!myFile.eof())
      {
        myFile >> highScore[i];
        i++;
      }
      index4 = i - 1;
      myFile.close();
    }
  }
  void printScore(int &index4, int highScore[])
  {
    for (int i = 0; i < index4; i++)
    {
      cout << i + 1 << ". " << highScore[i] << endl;
    }
  }

  // score.......................................